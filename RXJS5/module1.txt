import { Observable } from  'rxjs';
// import { Observable } from  'rxjs/Observable';
// import 'rxjs/add/operator/map';
// import 'rxjs/add/operator/filter';

let numbers = [1,2,3,4,5,"error"];

// let source = Observable.from(numbers);

let source = Observable.create(observer => {

    let index = 0;
     let produceValue = () => {
         observer.next(numbers[index++]);
         if(index < numbers.length) {
             setTimeout(produceValue,250)
         }
         else {
             observer.complete();
         }
     }
     produceValue();

}).map(n=> n*10)
    .filter(n => n > 20)

source.subscribe(
    value => console.log(`value :${value}`),
    e => console.log(`error :${e}`),
    () => console.log("complete")
);

// class MyObserver implements Observer<number> {
//         next = value => console.log(`value :${value}`);
//         error= e => console.log(`error :${e}`);
//         complete = () => console.log("complete");
// }
// source.subscribe(new MyObserver());